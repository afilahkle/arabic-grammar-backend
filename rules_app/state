from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('rules_app.urls')),
]

from django.urls import path
from . import views

urlpatterns = [
    path('rules/', views.RuleList.as_view()),
    path('rules/<int:pk>/', views.RuleDetail.as_view()),
]

from rest_framework import generics
from .models import Rule
from .serializers import RuleSerializer

class RuleList(generics.ListCreateAPIView):
    queryset = Rule.objects.all()
    serializer_class = RuleSerializer

class RuleDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Rule.objects.all()
    serializer_class = RuleSerializer


from django.db import models

# in your Rule model
class Rule(models.Model):
    topic = models.CharField(max_length=200)
    rule = models.CharField(max_length=500)
    highlightColor = models.CharField(max_length=7)
    sound = models.URLField()

    def __str__(self):
        return f"{self.topic}" 

# in your Example model
class Example(models.Model):
    rule = models.ForeignKey(Rule, related_name='examples', on_delete=models.CASCADE)
    sentence = models.CharField(max_length=500)
    highlightedIndices = models.CharField(max_length=100)

    def __str__(self):
        return f"{self.sentence[:50]}"  # Returns the first 50 characters of the sentence

from rest_framework import serializers
from .models import Rule, Example

class ExampleSerializer(serializers.ModelSerializer):
    class Meta:
        model = Example
        fields = ['id', 'sentence', 'highlightedIndices']

class RuleSerializer(serializers.ModelSerializer):
    examples = ExampleSerializer(many=True, read_only=True)

    class Meta:
        model = Rule
        fields = ['id', 'topic', 'rule', 'highlightColor', 'sound', 'examples']


# management/commandspopulate_db.py
import csv
import os
from django.core.management.base import BaseCommand
from rules_app.models import Rule, Example
from django.conf import settings
import random

def get_random_color():
    return "#{:06x}".format(random.randint(0, 0xFFFFFF))

class Command(BaseCommand):
    help = 'Populates the database with mocked data'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str, nargs='?', default="default")

    def handle(self, *args, **options):
        csv_dir = os.path.join(settings.BASE_DIR, "rules_app/management/commands/csv_files")
        files = [options['csv_file']] if options['csv_file'] != "default" else os.listdir(csv_dir)

        for file in files:
            self.populate(os.path.join(csv_dir, file))

        self.stdout.write(self.style.SUCCESS('Successfully populated database'))

    def populate(self, csv_file):
        with open(csv_file, newline='', encoding='utf-8') as f:
            reader = csv.reader(f)
            data = list(reader)

        # Get the rule from the first line
        rule_topic = data[0][0]
        new_rule = Rule.objects.create(
            topic=rule_topic,
            rule=f"In Arabic, {rule_topic}...",
            highlightColor = get_random_color(),
            sound="https://cdn.obsess-vr.com/RT3DTest/VFX/Audio/WalkSound.mp4"
        )

        # The rest of the lines are examples for the rule
        for row in data[1:]:
            sentence = row[0]
            highlighted_indices = sorted(random.sample(range(len(sentence)), k=len(sentence)//10))
            Example.objects.create(
                rule=new_rule,
                sentence=sentence,
                highlightedIndices=','.join(str(i) for i in highlighted_indices)
            )


# rules_app/admin.py
from django.contrib import admin
from .models import Rule, Example
from .forms import ExampleForm

class ExampleAdmin(admin.ModelAdmin):
    form = ExampleForm

    class Media:
        js = ('example_admin.js',)  # Path to your JavaScript file

admin.site.register(Rule)
admin.site.register(Example, ExampleAdmin)


# rules_app/forms.py
from django import forms
from .models import Example

class ClickableSentenceWidget(forms.TextInput):
    template_name = 'clickable_sentence_widget.html'

class ExampleForm(forms.ModelForm):
    class Meta:
        model = Example
        fields = ['sentence', 'highlightedIndices', 'rule']  # Include all fields that you want in the form
        widgets = {
            'sentence': ClickableSentenceWidget(),
        }

// static/example_admin.js
$(document).ready(function() {
    var sentence = $('#id_sentence').val();
    var displayDiv = $('#id_sentence-display');

    // Convert sentence into clickable spans
    for (var i = 0; i < sentence.length; i++) {
        var span = $('<span>').text(sentence[i]).data('index', i).click(onSpanClick);
        displayDiv.append(span);
    }
});

function onSpanClick() {
    var index = $(this).data('index');
    var highlightedIndices = $('#id_highlightedIndices').val().split(',');

    var indexPosition = highlightedIndices.indexOf(index.toString());
    if (indexPosition === -1) {
        highlightedIndices.push(index);
        $('#id_highlightedIndices').val(highlightedIndices.join(','));
        // Highlight the clicked span
        $(this).css('background-color', 'yellow');
    } else {
        highlightedIndices.splice(indexPosition, 1);
        $('#id_highlightedIndices').val(highlightedIndices.join(','));
        // Un-highlight the clicked span
        $(this).css('background-color', '');
    }
}



<!-- templates/clickable_sentence_widget.html -->
{% load static %}

<textarea id="{{ widget.attrs.id }}" name="{{ widget.name }}">{{ widget.value }}</textarea>
<div id="{{ widget.attrs.id }}-display"></div>

<script src="{% static 'admin/js/vendor/jquery/jquery.min.js' %}"></script>
<script>
  (function($) {
    $(document).ready(function() {
      var sentenceField = $('#id_sentence');
      var displayDiv = $('#{{ widget.attrs.id }}-display');

      function createClickableSpans(sentence) {
    displayDiv.empty();
    var highlightedIndices = $('#id_highlightedIndices').val().split(',');
    for (var i = 0; i < sentence.length; i++) {
        var span = $('<span>').text(sentence[i]).data('index', i).click(onSpanClick);
        // If the index is in the highlightedIndices array, highlight the span
        if (highlightedIndices.indexOf(i.toString()) !== -1) {
            span.css('background-color', 'yellow');
        }
        displayDiv.append(span);
    }
}

      function onSpanClick() {
        var index = $(this).data('index');
        var highlightedIndices = $('#id_highlightedIndices').val().split(',');

        var indexPosition = highlightedIndices.indexOf(index.toString());
        if (indexPosition === -1) {
          highlightedIndices.push(index);
          $('#id_highlightedIndices').val(highlightedIndices.join(','));
          $(this).css('background-color', 'yellow');
        } else {
          highlightedIndices.splice(indexPosition, 1);
          $('#id_highlightedIndices').val(highlightedIndices.join(','));
          $(this).css('background-color', '');
        }
  }


      sentenceField.on('input', function() {
        createClickableSpans(sentenceField.val());
      });

      // Create spans for the initial sentence
      createClickableSpans(sentenceField.val());
    });
  })(django.jQuery);
</script>
